{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAUeA,EARA,SAACC,GACf,OACC,yBAAKC,MAAS,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAO,UACnEJ,EAAMK,WCSKC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,yBAAKC,UAAY,uDAChB,yBAAKC,IAAK,QAAQC,IAAG,+BAA4BH,EAA5B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCWOK,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACA,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCENW,G,KAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKX,UAAW,OAChB,2BACCA,UAAY,mCACZY,KAAK,SACLC,YAAY,mBACZC,SAAWH,OC+BCI,G,wDAlCd,aAAc,IAAD,8BACZ,gBAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAbzC,EAAKC,MAAQ,CACZjB,OAAO,GACPM,YAAY,IAJD,E,gEAQO,IAAD,OAClBY,MAAM,8CACLC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAACd,OAAOsB,S,+BAM9B,IAAD,EACuBC,KAAKN,MAA5BjB,EADA,EACAA,OAAQM,EADR,EACQA,YACRkB,EAAiBxB,EAAOyB,QAAO,SAAAC,GACrC,OAAOA,EAAMjC,KAAKkC,cAAcC,SAAStB,EAAYqB,kBAErD,OAAQ3B,EAAO6B,OAChB,yBAAKjC,UAAY,MAChB,wBAAIA,UAAY,MAAhB,eACA,kBAAC,EAAD,CAAWW,aAAgBgB,KAAKX,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUZ,OAAQwB,MALM,2C,GAvBTM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.be02a55a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t\t<div style = {{overflowY:'scroll', border: '5px solid black', height:'700px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className = \"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n\t\t\t<img alt =\"robot\" src ={ `https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t <h2>{name}</h2>\r\n\t\t\t <p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\t\r\n\t\t\trobots.map((user,i) =>{\r\n\t\t\t\treturn (\r\n\t\t\t\t<Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}/> )\r\n})}\r\n\t\t</div>\r\n\t\t)\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn(\r\n\t\t<div className= 'pa2'>\r\n\t\t<input \r\n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype=\"search\" \r\n\t\t\tplaceholder='search robots...'\r\n\t\t\tonChange= {searchChange} />\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox.js'\r\nimport './App.css'\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots:[],\r\n\t\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response =>{ return response.json() })\r\n\t\t.then(users =>{ this.setState({robots:users})});\r\n\t}\r\n\r\n\tonSearchChange = (event) =>{\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t}\r\n\trender(){\r\n\t\tconst {robots, searchfield} = this.state;\r\n\t\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\t\treturn !robots.length ? <h1>Loading</h1> :  (\r\n\t\t<div className = 'tc'>\r\n\t\t\t<h1 className = \"f1\">RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t\t)};\r\n\t}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n\t<App />\n\t,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}